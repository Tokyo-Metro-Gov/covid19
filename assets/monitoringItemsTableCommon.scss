@import "global.scss";

$default-bdw: 3px;
$default-boxdiff: 35px;

.container { /* .container > .box > (.group > .box > ...) .pillar > .content */
  width: 100%;
  box-sizing: border-box;
  color: $green-1;
  line-height: 1.35;

  * {
    box-sizing: border-box;
  }

  /* override default styles */
  padding-left: 0 !important;

  ul {
    padding-left: 0;
  }
}

.group {
  flex: 0 0 auto;
  padding-left: $default-bdw !important;
  border-top: $default-bdw solid $green-1;
  border-left: $default-bdw solid $green-1;
}

.content {
  padding: 5px 10px;
  display: flex;
  justify-content: space-between;
  align-items: center;
  width: 100%;
  border: $default-bdw solid $green-1;

  > span {
    display: block;

    @mixin font-size {
      $size: 14;
    }

    &:first-child {
      text-align: left;
      margin-top: 1px;
      flex-shrink: 2;
    }

    &:not(:last-child) {
      overflow-wrap: break-word;
    }
  }

  strong {
    @include font-size {
      $size: 16;
    }
  }

  span.unit {
    @include font-size {
      $size: 14;
    }
  }
}

.box {
  display: block;
  margin-top: $default-bdw;

  &.parent {
    border-top: $default-bdw solid $green-1;
    border-left: $default-bdw solid $green-1;
    position: relative;
    padding-left: - $default-bdw * 2 + $default-boxdiff;

    &::after {
      content: "";
      display: block;
      position: absolute;
      left: -1px;
      bottom: 0;
      width: - $default-bdw * 2 + $default-boxdiff;
      border-bottom: $default-bdw solid $green-1;
    }

    > .content {
      $margin-left: calc($default-bdw * 2 - $default-boxdiff);

      width: 100% - $margin-left;
      border-top: none;
      border-left: none;
      border-bottom: none;
    }
  }
}

@mixin px2vw {
   {
    @if $vw > 0 {
      $shft-px: 100000 * $px;
      @return div(div($shft-px, $vw) + $shft-px % $vw != 0, 1000);
    } @else {
      @return #{$px}px;
    }
  }
}

@mixin override($vw, $bdw, $fz, $boxdiff) {
  .group {
    $padding-left: px2vw($bdw, $vw) !important;

    border-top: $padding-left solid $green-1;
    border-left: $padding-left solid $green-1;
  }

  .content {
    padding: px2vw(5, $vw) px2vw(10, $vw);
    border: px2vw($bdw, $vw) solid $green-1;

    > span {
      @include font-size {
        $size: $fz;
      }

      &:first-child {
        margin-top: px2vw(1, $vw);
      }
    }

    strong {
      @include font-size {
        $size: $fz + 2;
      }
    }

    span.unit {
      @include font-size {
        $size: $fz;
      }
    }
  }

  .box {
    margin-top: px2vw($bdw, $vw);

    &.parent {
      $border-top: px2vw($bdw, $vw) solid $green-1;

      border-left: $border-top solid $green-1;

      $padding-left: px2vw($boxdiff - $bdw * 2, $vw);

      &::after {
        width: px2vw($boxdiff - $bdw, $vw);
        border-bottom: px2vw($bdw, $vw) solid $green-1;
      }

      > .content {
        margin-left: -$padding-left;
        width: 100% - $padding-left;
      }
    }
  }
}

/* Vuetify Breakpoints: Large (1264) */
@include lessThan(1263) {
  @include override(1263, 3, 14, 35);
}

/* Vuetify Breakpoints: Small (960) */
@include lessThan(959) {
  @include override(960, 3, 14, 35);
}

/* Vuetify Breakpoints: Extra Small (600) */
@include lessThan(600) {
  @include override(600, 3, 14, 35);
}
